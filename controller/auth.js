const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const db = require("../connectSV/index"); // Nh·ªõ import file connectSV/index.js
const router = express.Router();
const SECRET_KEY = "SnapLocationWebApplicationVienChuVan";

// üîπ S·ª≠ d·ª•ng promise-based query ƒë√∫ng c√°ch
router.post("/login", async (req, res) => {
  try {
    const { user, pass } = req.body;

    // K·∫øt n·ªëi database
    const connection = await db.getConnection();
    try {
      // Truy v·∫•n user t·ª´ database
      const [users] = await connection.query("SELECT * FROM users WHERE user = ?", [user]);

      if (users.length === 0) {
        return res.status(200).json({ code: 1, message: "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω!" });
      }

      const userData = users[0];

      // Ki·ªÉm tra m·∫≠t kh·∫©u
      const isMatch = await bcrypt.compare(pass, userData.pass);
      if (!isMatch) {
        return res.status(200).json({ code: 0, message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
      }

      // T·∫°o JWT token
      const token = jwt.sign({ id: userData.id, user: userData.user }, SECRET_KEY, { expiresIn: "1h" });

      res.status(200).json({
        code: 200,
        message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
        accessToken: token,
        user: userData,
      });

    } catch (queryErr) {
      console.error("‚ùå L·ªói truy v·∫•n MySQL:", queryErr);
      res.status(500).json({ code: 500, error: "L·ªói server", details: queryErr.message });
    } finally {
      connection.release(); // Gi·∫£i ph√≥ng k·∫øt n·ªëi d√π c√≥ l·ªói hay kh√¥ng
    }

  } catch (err) {
    console.error("‚ö†Ô∏è L·ªói k·∫øt n·ªëi database:", err);
    res.status(500).json({ code: 500, error: "L·ªói k·∫øt n·ªëi database", details: err.message });
  }
});



module.exports = router;
